#! /usr/bin/env -S uv run --no-config --no-progress --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "boto3",
# ]
# # better reproducibility
# # [tool.uv]
# # exclude-newer = "2025-01-25T00:00:00Z"
# ///
"""Redrive DLQ messages"""

import argparse
import json
import time

import boto3


def aws_account(session) -> str:
    sts = session.client('sts')
    try:
        return sts.get_caller_identity()['Account']
    except Exception as e:
        quit('Expired token')


def redrive(session, src_url, dst_url, max_msg=10):
    sqs = session.client('sqs')
    try:
        response = sqs.receive_message(
            QueueUrl=src_url, WaitTimeSeconds=0, MaxNumberOfMessages=max_msg
        )
        messages = response.get('Messages')
    except Exception as e:
        print(f"Error fetching messages from source {src_url}", e)
        return

    if not messages:
        print(f"No messages in source {src_url}.")
        return

    try:
        for i, message in enumerate(messages, start=1):
            sqs.send_message(QueueUrl=dst_url, MessageBody=message['Body'])
            sqs.delete_message(QueueUrl=src_url, ReceiptHandle=message['ReceiptHandle'])
            print(f"{i:>2} {message['MessageId']}")
    except Exception as e:
        print("Error processing message:", e)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--profile', type=str, default='default')
    parser.add_argument('--queue', type=str, required=True)
    parser.add_argument('--max', type=int, default=10, choices=range(1, 11))
    args = parser.parse_args()

    session = boto3.Session(profile_name=args.profile)
    account = aws_account(session)

    args.queue = args.queue.removesuffix('-dlq')
    que = f'https://sqs.{session.region_name}.amazonaws.com/{account}/{args.queue}'
    dlq = f'https://sqs.{session.region_name}.amazonaws.com/{account}/{args.queue}-dlq'

    redrive(session, dlq, que, args.max)

